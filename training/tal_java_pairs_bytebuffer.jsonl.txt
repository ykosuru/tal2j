{"text":"Example: Single ByteBuffer Allocation\n<TAL>\nSTRUCT record (*);\nBEGIN\n  INT id;\n  STRING name[0:4];\nEND;\n\nSTRUCT .records[0:2] (record);\nINT .ptr (record);\n\nPROC demo MAIN;\nBEGIN\n  records[0].id := 1;\n  records[0].name ':=' \"ABC\";\n  @ptr := @records[0];\n  ptr.id := 2;\n  records[1] := records[0];\nEND;\n</TAL>\n<JAVA>\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.charset.Charset;\n\nclass Record {\n    static final Charset TAL_CHARSET = Charset.forName(\"IBM500\");\n    static final int BYTE_LENGTH = 2 + 5;\n\n    private ByteBuffer buffer = ByteBuffer.allocate(BYTE_LENGTH).order(ByteOrder.LITTLE_ENDIAN);\n\n    public void setId(int id) { buffer.putShort(0, (short)id); }\n    public void setName(String value) {\n        byte[] target = new byte[5];\n        byte[] valueBytes = value.getBytes(TAL_CHARSET);\n        System.arraycopy(valueBytes, 0, target, 0, Math.min(valueBytes.length, 5));\n        buffer.position(2).put(target);\n    }\n\n    public int getId() { return buffer.getShort(0); }\n    public String getName() { return new String(buffer.array(), 2, 5, TAL_CHARSET).trim(); }\n\n    public byte[] toBytes() { buffer.position(0); return buffer.array(); }\n    public void fromBytes(byte[] bytes) { buffer.position(0).put(bytes); }\n    public static int getByteLength() { return BYTE_LENGTH; }\n}\n\npublic class Demo {\n    static ByteBuffer recordsBuffer = ByteBuffer.allocate(Record.getByteLength() * 3).order(ByteOrder.LITTLE_ENDIAN);\n    static int ptrOffset = -1;\n\n    public static void main(String[] args) {\n        Record temp = new Record();\n\n        temp.setId(1);\n        temp.setName(\"ABC\");\n        recordsBuffer.position(0).put(temp.toBytes());\n\n        ptrOffset = 0;\n        byte[] data = new byte[Record.getByteLength()];\n        recordsBuffer.position(ptrOffset).get(data);\n        temp.fromBytes(data);\n        temp.setId(2);\n        recordsBuffer.position(ptrOffset).put(temp.toBytes());\n\n        recordsBuffer.position(0).get(data);\n        recordsBuffer.position(Record.getByteLength()).put(data);\n    }\n}\n</JAVA>"}
{"text":"Example: Improved Pointer Handling with Single ByteBuffer\n<TAL>\nSTRUCT emp (*);\nBEGIN\n  INT id;\n  STRING name[0:4];\nEND;\n\nSTRUCT .emp_db[0:2] (emp);\nINT .emp_ptr (emp);\n\nPROC demo MAIN;\nBEGIN\n  emp_db[0].id := 1;\n  emp_db[0].name ':=' \"ABC\";\n  @emp_ptr := @emp_db[0];\n  emp_ptr.id := 2;\nEND;\n</TAL>\n<JAVA>\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.charset.Charset;\n\nclass Emp {\n    static final Charset TAL_CHARSET = Charset.forName(\"IBM500\");\n    static final int BYTE_LENGTH = 2 + 5;\n\n    private static final int OFFSET_ID = 0;\n    private static final int OFFSET_NAME = 2;\n\n    public static void setId(ByteBuffer buffer, int offset, int id) {\n        buffer.position(offset + OFFSET_ID).putShort((short)id);\n    }\n    public static void setName(ByteBuffer buffer, int offset, String value) {\n        byte[] target = new byte[5];\n        byte[] valueBytes = value.getBytes(TAL_CHARSET);\n        System.arraycopy(valueBytes, 0, target, 0, Math.min(valueBytes.length, 5));\n        buffer.position(offset + OFFSET_NAME).put(target);\n    }\n    public static int getByteLength() { return BYTE_LENGTH; }\n}\n\npublic class Demo {\n    static ByteBuffer empDbBuffer = ByteBuffer.allocate(Emp.getByteLength() * 3).order(ByteOrder.LITTLE_ENDIAN);\n    static int empPtrOffset = -1;\n\n    public static void main(String[] args) {\n        Emp.setId(empDbBuffer, 0, 1);\n        Emp.setName(empDbBuffer, 0, \"ABC\");\n\n        empPtrOffset = 0;\n        Emp.setId(empDbBuffer, empPtrOffset, 2);\n    }\n}\n</JAVA>"}
