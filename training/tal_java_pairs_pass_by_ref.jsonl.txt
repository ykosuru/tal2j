{"text":"Example 1: Double Integer\n<TAL>\n?PAGE \"DOUBLE INTEGER – DOUBLE^INT^P100\"\nPROC DOUBLE^INT^P100 (num, result^val, result^ref);\nBEGIN\n  INT num;\n  INT result^val;\n  INT result^ref;\n  INT local^copy;\n  local^copy := num;\n  local^copy := local^copy * 2;\n  result^val := local^copy;\n  result^ref := num * 2;\n  CALL LOG^ERR (0, \"Doubled integer\", 0);\nEND;\n</TAL>\n<JAVA>\nclass GuardianInterface {\n    public static void logErr(int severity, String message, int code) {\n        System.out.println(\"LOG_INFO (Code \" + code + \"): \" + message);\n    }\n}\nclass IntWrapper {\n    public int value;\n    public IntWrapper() { this.value = 0; }\n}\npublic class DoubleInt {\n    public static void doubleIntP100(int num, IntWrapper resultValWrapper, IntWrapper resultRefWrapper) {\n        int localCopy = num;\n        localCopy = localCopy * 2;\n        resultValWrapper.value = localCopy;\n        resultRefWrapper.value = num * 2;\n        GuardianInterface.logErr(0, \"Doubled integer\", 0);\n    }\n}\n</JAVA>\n\nExample 2: Append Character\n<TAL>\n?PAGE \"APPEND CHAR – APPEND^CHAR^P100\"\nPROC APPEND^CHAR^P100 (str, str^len, result^val, result^ref);\nBEGIN\n  STRING .str[0:9];\n  INT str^len;\n  STRING .result^val[0:9];\n  STRING .result^ref[0:9];\n  STRING .local^copy[0:9];\n  INT i;\n  FOR i := 0 TO str^len - 1 DO\n    local^copy[i] := str[i];\n  END;\n  IF str^len < 10 THEN\n    BEGIN\n      local^copy[str^len] := \"X\";\n      result^val := local^copy;\n    END;\n  IF str^len < 10 THEN\n    result^ref[str^len] := \"X\";\n  CALL LOG^ERR (0, \"Appended character\", 0);\nEND;\n</TAL>\n<JAVA>\nclass GuardianInterface {\n    public static void logErr(int severity, String message, int code) {\n        System.out.println(\"LOG_INFO (Code \" + code + \"): \" + message);\n    }\n}\npublic class AppendChar {\n    public static void appendCharP100(byte[] str, int strLen, byte[] resultVal, byte[] resultRef) {\n        if (str == null || str.length < 10 || resultVal == null || resultVal.length < 10 || resultRef == null || resultRef.length < 10) {\n            return;\n        }\n        byte[] localCopy = new byte[10];\n        for (int i = 0; i < strLen; i++) {\n            localCopy[i] = str[i];\n        }\n        if (strLen < 10) {\n            localCopy[strLen] = (byte)'X';\n            System.arraycopy(localCopy, 0, resultVal, 0, 10);\n        }\n        if (strLen < 10) {\n            resultRef[strLen] = (byte)'X';\n        }\n        GuardianInterface.logErr(0, \"Appended character\", 0);\n    }\n}\n</JAVA>\n\nExample 3: Square Long Integer\n<TAL>\n?PAGE \"SQUARE LONG – SQUARE^LONG^P100\"\nPROC SQUARE^LONG^P100 (num, result^val, result^ref);\nBEGIN\n  INT(32) num;\n  INT(32) result^val;\n  INT(32) result^ref;\n  INT(32) local^copy;\n  local^copy := num;\n  local^copy := local^copy * local^copy;\n  result^val := local^copy;\n  result^ref := num * num;\n  CALL LOG^ERR (0, \"Squared long integer\", 0);\nEND;\n</TAL>\n<JAVA>\nclass GuardianInterface {\n    public static void logErr(int severity, String message, int code) {\n        System.out.println(\"LOG_INFO (Code \" + code + \"): \" + message);\n    }\n}\nclass LongWrapper {\n    public long value;\n    public LongWrapper() { this.value = 0; }\n}\npublic class SquareLong {\n    public static void squareLongP100(long num, LongWrapper resultValWrapper, LongWrapper resultRefWrapper) {\n        long localCopy = num;\n        localCopy = localCopy * localCopy;\n        resultValWrapper.value = localCopy;\n        resultRefWrapper.value = num * num;\n        GuardianInterface.logErr(0, \"Squared long integer\", 0);\n    }\n}\n</JAVA>"}
{"text":"Example 1: Add Numbers\n<TAL>\n?PAGE \"ADD TWO NUMBERS – ADD^NUMBERS^P100\"\nPROC ADD^NUMBERS^P100 (num1, num2, result);\nBEGIN\n  INT num1;\n  INT num2;\n  INT result;\n  result := num1 + num2;\nEND;\n</TAL>\n<JAVA>\nclass IntWrapper {\n    public int value;\n    public IntWrapper() { this.value = 0; }\n}\npublic class AddNumbers {\n    public static void addNumbersP100(int num1, int num2, IntWrapper resultWrapper) {\n        resultWrapper.value = num1 + num2;\n    }\n}\n</JAVA>\n\nExample 2: Count Up\n<TAL>\n?PAGE \"COUNT UP – COUNT^UP^P100\"\nPROC COUNT^UP^P100 (limit, counter);\nBEGIN\n  INT limit;\n  INT counter;\n  INT i;\n  counter := 0;\n  FOR i := 1 TO limit DO\n    counter := counter + 1;\n  END;\n  CALL LOG^ERR (0, \"Counted up to limit\", 0);\nEND;\n</TAL>\n<JAVA>\nclass GuardianInterface {\n    public static void logErr(int severity, String message, int code) {\n        System.out.println(\"LOG_INFO (Code \" + code + \"): \" + message);\n    }\n}\nclass IntWrapper {\n    public int value;\n    public IntWrapper() { this.value = 0; }\n}\npublic class CountUp {\n    public static void countUpP100(int limit, IntWrapper counterWrapper) {\n        int i;\n        counterWrapper.value = 0;\n        for (i = 1; i <= limit; i++) {\n            counterWrapper.value = counterWrapper.value + 1;\n        }\n        GuardianInterface.logErr(0, \"Counted up to limit\", 0);\n    }\n}\n</JAVA>\n\nExample 3: Check Positive\n<TAL>\n?PAGE \"CHECK POSITIVE – CHECK^POSITIVE^P100\"\nPROC CHECK^POSITIVE^P100 (num, is^positive);\nBEGIN\n  INT num;\n  INT is^positive;\n  IF num > 0 THEN\n    is^positive := 1;\n  ELSE\n    BEGIN\n      is^positive := 0;\n      CALL LOG^ERR (stop^process, \"Number must be positive\", 1);\n    END;\nEND;\n</TAL>\n<JAVA>\nclass GuardianInterface {\n    public static final int STOP_PROCESS = 2;\n    public static void logErr(int severity, String message, int code) {\n        System.err.println(\"LOG_ERR (Severity \" + severity + \", Code \" + code + \"): \" + message);\n        if (severity == STOP_PROCESS) {\n            System.err.println(\"Terminating process due to error.\");\n            System.exit(code);\n        }\n    }\n}\nclass IntWrapper {\n    public int value;\n    public IntWrapper() { this.value = 0; }\n}\npublic class CheckPositive {\n    public static void checkPositiveP100(int num, IntWrapper isPositiveWrapper) {\n        if (num > 0) {\n            isPositiveWrapper.value = 1;\n        } else {\n            isPositiveWrapper.value = 0;\n            GuardianInterface.logErr(GuardianInterface.STOP_PROCESS,\n                                     \"Number must be positive\",\n                                     1);\n        }\n    }\n}\n</JAVA>"}
{"text":"\n<TAL>\n?PAGE \"APPEND CHAR – APPEND^CHAR^P100\"\nPROC APPEND^CHAR^P100 (str, str^len, result^val, result^ref);\nBEGIN\n  STRING .str[0:9];\n  INT str^len;\n  STRING .result^val[0:9];\n  STRING .result^ref[0:9];\n  STRING .local^copy[0:9];\n  INT i;\n  FOR i := 0 TO str^len - 1 DO\n    local^copy[i] := str[i];\n  END;\n  IF str^len < 10 THEN\n    BEGIN\n      local^copy[str^len] := \"X\";\n      result^val := local^copy;\n    END;\n  IF str^len < 10 THEN\n    result^ref[str^len] := \"X\";\n  CALL LOG^ERR (0, \"Appended character\", 0);\nEND;\n</TAL>\n<JAVA>\nclass GuardianInterface {\n    public static void logErr(int severity, String message, int code) {\n        System.out.println(\"LOG_INFO (Code \" + code + \"): \" + message);\n    }\n}\npublic class AppendChar {\n    public static void appendCharP100(byte[] str, int strLen, byte[] resultVal, byte[] resultRef) {\n        if (str == null || str.length < 10 || resultVal == null || resultVal.length < 10 || resultRef == null || resultRef.length < 10) {\n            return;\n        }\n        byte[] localCopy = new byte[10];\n        for (int i = 0; i < strLen; i++) {\n            localCopy[i] = str[i];\n        }\n        if (strLen < 10) {\n            localCopy[strLen] = (byte)'X';\n            System.arraycopy(localCopy, 0, resultVal, 0, 10);\n        }\n        if (strLen < 10) {\n            resultRef[strLen] = (byte)'X';\n        }\n        GuardianInterface.logErr(0, \"Appended character\", 0);\n    }\n}\n</JAVA>"}
